dataset_type: NuScenesMapDataset
dataset_root: ./data/nuscenes
dataset_process_root: ./data/nuscenes_mmdet3d-12Hz_description  # with visibility

template: A driving scene image at {location}. {description}.
collect_meta_keys:  # send to DataContainer
  - camera_intrinsics
  - lidar2ego
  - lidar2camera
  - camera2lidar
  - lidar2image
  - camera2ego
  - img_aug_matrix
  - relative_pose
  # - lidar_aug_matrix  # this is useful when we change lidar and box
collect_meta_lis_keys:  # hold by one DataContainer
  - timeofday
  - location
  - description
  - filename
  - token

# point_cloud_range: [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]
# voxel_size: [0.1, 0.1, 0.2]
# image_size: [256, 704]  # size of devfusion
image_size: [448, 800]
map_bound:
  x: [-50.0, 50.0, 0.5]
  y: [-50.0, 50.0, 0.5]

view_order:
  - "CAM_FRONT_LEFT"
  - "CAM_FRONT"
  - "CAM_FRONT_RIGHT"
  - "CAM_BACK_RIGHT"
  - "CAM_BACK"
  - "CAM_BACK_LEFT"

neighboring_view_pair:
  0: [5, 1]
  1: [0, 2]
  2: [1, 3]
  3: [2, 4]
  4: [3, 5]
  5: [4, 0]

back_resize: [896, 1600]  # (h, w)
back_pad: [0, 4, 0, 0]  # left, top, right and bottom

augment2d:
  resize: [[0.5, 0.5]]
  rotate: null

aux_data:  # order is fix (v, c_offset, c_ohw, h), here only existence
  - visibility  # 1
  - center_offset  # 2
  - center_ohw  # 4 = 2 + 2
  - height  # height of 3d bbox

augment3d:
  scale: [1.0, 1.0]  # adjust the scale
  rotate: [0.0, 0.0]  # rotation the lidar
  translate: 0  # shift
  flip_ratio: 0.0
  flip_direction: null

# class name conversion is done through pre-process
# re-order according to this list is done in NuScenesDataset.get_ann_info
object_classes:
  - car
  - truck
  - construction_vehicle
  - bus
  - trailer
  - barrier
  - motorcycle
  - bicycle
  - pedestrian
  - traffic_cone

map_classes:
  - divider
  - ped_crossing
  - boundary

input_modality:
  use_lidar: false
  use_camera: true
  use_radar: false
  use_map: false
  use_external: false

train_pipeline:
  -
    type: LoadMultiViewImageFromFiles
    to_float32: true
  -
    type: LoadAnnotations3D
    with_bbox_3d: true
    with_label_3d: true
    with_attr_label: False
  -
    type: ImageAug3D  # random crop and rotate image and generate extrinsics
    final_dim: ${...image_size}
    resize_lim: ${...augment2d.resize[0]}  # range for resize ratio
    bot_pct_lim: [0.0, 0.0]  # this is the ratio in [0, 1] to keep bottom, default only crop top
    rot_lim: ${...augment2d.rotate}
    rand_flip: false
    is_train: false  # is false, range takes mean, disable flip and rotate
  -
    type: GlobalRotScaleTrans
    resize_lim: ${...augment3d.scale}
    rot_lim: ${...augment3d.rotate}
    trans_lim: ${...augment3d.translate}
    is_train: true
  -
    type: ObjectNameFilter  # this removes -1, do not really filter by names
    classes: ${...object_classes}
  - 
    type: ReorderMultiViewImages
    order: ${...view_order}
    safe: False
  -
    type: ImageNormalize
    mean: [0.5, 0.5, 0.5]
    std: [0.5, 0.5, 0.5]
  -
    type: DefaultFormatBundle3D
    classes: ${...object_classes}
  -
    type: Collect3D
    keys:  # keep as origin
      - img
      # - points
      - gt_bboxes_3d
      - gt_labels_3d
    meta_keys: ${...collect_meta_keys}
    meta_lis_keys: ${...collect_meta_lis_keys}

test_pipeline:
  -
    type: LoadMultiViewImageFromFiles
    to_float32: true
  -
    type: LoadAnnotations3D
    with_bbox_3d: true
    with_label_3d: true
    with_attr_label: False
  -
    type: ImageAug3D  # keep this to perform image resize
    final_dim: ${...image_size}
    resize_lim: ${...augment2d.resize[0]}
    bot_pct_lim: [0.0, 0.0]
    rot_lim: [0.0, 0.0]
    rand_flip: false
    is_train: false
  -
    type: GlobalRotScaleTrans  # add `lidar_aug_matrix`
    resize_lim: ${...augment3d.scale}
    rot_lim: ${...augment3d.rotate}
    trans_lim: ${...augment3d.translate}
    is_train: true
  -
    type: ObjectNameFilter
    classes: ${...object_classes}
  - 
    type: ReorderMultiViewImages
    order: ${...view_order}
    safe: False
  -
    type: ImageNormalize
    mean: [0.5, 0.5, 0.5]
    std: [0.5, 0.5, 0.5]
  -
    type: DefaultFormatBundle3D
    classes: ${...object_classes}
  -
    type: Collect3D
    keys:
      - img
      - gt_bboxes_3d
      - gt_labels_3d
    meta_keys: ${...collect_meta_keys}
    meta_lis_keys: ${...collect_meta_lis_keys}

data:
  # samples_per_gpu: 4  # we do not set these here.
  # workers_per_gpu: 4
  train:  # here we drop the wrapper of CBGSDataset
    type: ${...dataset_type}
    dataset_root: ${...dataset_root}
    ann_file: ${...dataset_process_root}nuscenes_infos_train.pkl
    pipeline: ${...train_pipeline}
    object_classes: ${...object_classes}
    map_classes: ${...map_classes}
    modality: ${...input_modality}
    test_mode: false
    # use_valid_flag: true  # this will filter some objects, not sure why
    force_all_boxes: true  # !! even without `use_valid_flag`, objects with no lidar pts will be filtered
    box_type_3d: LiDAR  # this is ok, all boxes are under the lidar coord
    filter_empty_gt: false  # important, prevent from filter
    xbound: ${...map_bound.x}
    ybound: ${...map_bound.y}
    fps: 2
  val:
    type: ${...dataset_type}
    dataset_root: ${...dataset_root}
    ann_file: ${...dataset_process_root}nuscenes_infos_val.pkl
    pipeline: ${...test_pipeline}
    object_classes: ${...object_classes}
    map_classes: ${...map_classes}
    modality: ${...input_modality}
    test_mode: false
    force_all_boxes: true  # !! even without `use_valid_flag`, objects with no lidar pts will be filtered
    box_type_3d: LiDAR
    filter_empty_gt: false  # important, prevent from filter
    xbound: ${...map_bound.x}
    ybound: ${...map_bound.y}
    fps: 2
  test:
    type: ${...dataset_type}
    dataset_root: ${...dataset_root}
    ann_file: ${...dataset_process_root}nuscenes_infos_val.pkl
    pipeline: ${...test_pipeline}
    object_classes: ${...object_classes}
    map_classes: ${...map_classes}
    modality: ${...input_modality}
    test_mode: true
    force_all_boxes: true  # !! even without `use_valid_flag`, objects with no lidar pts will be filtered
    box_type_3d: LiDAR
    filter_empty_gt: false  # important, prevent from filter
    xbound: ${...map_bound.x}
    ybound: ${...map_bound.y}
    fps: 2